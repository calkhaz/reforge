use crate::config::ast::Expr;
use crate::config::ast::Pipeline;

grammar;

pub ExprList: Vec<Box<Expr>> = {
    <pipeline_expr: Expr> => vec![pipeline_expr],
    <pipeline_exprs: ExprList> <pipeline_expr: Expr> => {
        let mut exprs = pipeline_exprs;
        exprs.push(pipeline_expr);
        exprs
    }
};

Expr: Box<Expr> = {
    // Graph: pipelineX -> pipelineY -> pipelineZ
    <graph:GraphExpr> => Box::new(Expr::Graph(graph)),

    // Single-line comment: // coment
    r"//[^\n\r]*[\n\r]*" => Box::new(Expr::Ignore(0)),

    // Multi-line comments: /* comment */ 
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => Box::new(Expr::Ignore(0))
};

GraphExpr: Vec<(String, Option<String>)> = {
    <pipeline0:GraphMember> "->" <pipeline1:GraphMember> => vec![pipeline0, pipeline1],
    <graph:GraphExpr> "->" <pipeline:GraphMember> => {
        let mut exprs = graph;
        exprs.push(pipeline);
        exprs
    },
};

GraphMember: (String, Option<String>) = {
    <pipeline:Str> => (pipeline, None),
    <pipeline:Str> ":" <descriptor:Str> => (pipeline, Some(descriptor.to_string()))
};

// C-like identifier + '-'
Str: String = <s:r"[a-zA-Z_][a-zA-Z0-9_-]+"> => s.to_string();
