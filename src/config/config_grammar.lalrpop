use std::str::FromStr;
use std::collections::HashMap;
use crate::config::ast::ParamValue;
use crate::config::ast::Expr;
use crate::config::ast::Pipeline;

grammar;

pub ExprList: Vec<Box<Expr>> = {
    <pipeline_expr: Expr> => vec![pipeline_expr],
    <pipeline_exprs: ExprList> <pipeline_expr: Expr> => {
        let mut exprs = pipeline_exprs;
        exprs.push(pipeline_expr);
        exprs
    }
};

Expr: Box<Expr> = {
    // pipeline definition: gaussian : { sigma: 32, val: 123 }
    <pipeline:PipelineField>  => Box::new(Expr::Pipeline(pipeline)),

    // Graph: pipelineX -> pipelineY -> pipelineZ
    <graph:GraphExpr> => Box::new(Expr::Graph(graph)),

    // Single-line comment: // coment
    r"//[^\n\r]*[\n\r]*" => Box::new(Expr::Ignore(0)),

    // Multi-line comments: /* comment */ 
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => Box::new(Expr::Ignore(0))
};

GraphExpr: Vec<(String, Option<String>)> = {
    <pipeline0:GraphMember> "->" <pipeline1:GraphMember> => vec![pipeline0, pipeline1],
    <graph:GraphExpr> "->" <pipeline:GraphMember> => {
        let mut exprs = graph;
        exprs.push(pipeline);
        exprs
    },
};

GraphMember: (String, Option<String>) = {
    <pipeline:Str> => (pipeline, None),
    <pipeline:Str> ":" <descriptor:Str> => (pipeline, Some(descriptor.to_string()))
};

PipelineField: Pipeline = {
    <name:Str> ":" <pipeline_type:Str> <parameters:PipelineParams> => Pipeline{name, pipeline_type, parameters}
};

PipelineParams: HashMap<String, Box<ParamValue>> = {
     "{" <map:ParamFieldList> "}" => map,
     "{}" => HashMap::new()
};

ParamFieldList: HashMap<String, Box<ParamValue>> = {
    <head:ParamField> <tail:("," ParamField)*> => {
        let mut result = HashMap::new();
        result.insert(head.0, head.1);

        for (key, value) in tail.into_iter().map(|(_, f)| f) {
            result.insert(key, value);
        }
        result
    }
};

ParamField: (String, Box<ParamValue>) = {
    <key:Str> ":" <value:ParamValueOp> => (key, value),
};

ParamValueOp: Box<ParamValue> = {
    r"[0-9]+" => Box::new(ParamValue::Number(i32::from_str(<>).unwrap())),
};

// C-like identifier + '-'
Str: String = <s:r"[a-zA-Z_][a-zA-Z0-9_-]+"> => s.to_string();
